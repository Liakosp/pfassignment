/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.pf.assignment.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * We define a Date struct to represnt the time of the logging evenr.
 * The reason for doing so is to ensure that the server can parse the date
 * by using the pattern provided without any additional information or convention
 * between the client and the server applications.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-27")
public class LogEventDate implements org.apache.thrift.TBase<LogEventDate, LogEventDate._Fields>, java.io.Serializable, Cloneable, Comparable<LogEventDate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogEventDate");

  private static final org.apache.thrift.protocol.TField DATE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("dateString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("pattern", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LogEventDateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LogEventDateTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String dateString; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pattern; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE_STRING((short)1, "dateString"),
    PATTERN((short)2, "pattern");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE_STRING
          return DATE_STRING;
        case 2: // PATTERN
          return PATTERN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE_STRING, new org.apache.thrift.meta_data.FieldMetaData("dateString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATTERN, new org.apache.thrift.meta_data.FieldMetaData("pattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogEventDate.class, metaDataMap);
  }

  public LogEventDate() {
  }

  public LogEventDate(
    java.lang.String dateString,
    java.lang.String pattern)
  {
    this();
    this.dateString = dateString;
    this.pattern = pattern;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogEventDate(LogEventDate other) {
    if (other.isSetDateString()) {
      this.dateString = other.dateString;
    }
    if (other.isSetPattern()) {
      this.pattern = other.pattern;
    }
  }

  public LogEventDate deepCopy() {
    return new LogEventDate(this);
  }

  @Override
  public void clear() {
    this.dateString = null;
    this.pattern = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDateString() {
    return this.dateString;
  }

  public LogEventDate setDateString(@org.apache.thrift.annotation.Nullable java.lang.String dateString) {
    this.dateString = dateString;
    return this;
  }

  public void unsetDateString() {
    this.dateString = null;
  }

  /** Returns true if field dateString is set (has been assigned a value) and false otherwise */
  public boolean isSetDateString() {
    return this.dateString != null;
  }

  public void setDateStringIsSet(boolean value) {
    if (!value) {
      this.dateString = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPattern() {
    return this.pattern;
  }

  public LogEventDate setPattern(@org.apache.thrift.annotation.Nullable java.lang.String pattern) {
    this.pattern = pattern;
    return this;
  }

  public void unsetPattern() {
    this.pattern = null;
  }

  /** Returns true if field pattern is set (has been assigned a value) and false otherwise */
  public boolean isSetPattern() {
    return this.pattern != null;
  }

  public void setPatternIsSet(boolean value) {
    if (!value) {
      this.pattern = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DATE_STRING:
      if (value == null) {
        unsetDateString();
      } else {
        setDateString((java.lang.String)value);
      }
      break;

    case PATTERN:
      if (value == null) {
        unsetPattern();
      } else {
        setPattern((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE_STRING:
      return getDateString();

    case PATTERN:
      return getPattern();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DATE_STRING:
      return isSetDateString();
    case PATTERN:
      return isSetPattern();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LogEventDate)
      return this.equals((LogEventDate)that);
    return false;
  }

  public boolean equals(LogEventDate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dateString = true && this.isSetDateString();
    boolean that_present_dateString = true && that.isSetDateString();
    if (this_present_dateString || that_present_dateString) {
      if (!(this_present_dateString && that_present_dateString))
        return false;
      if (!this.dateString.equals(that.dateString))
        return false;
    }

    boolean this_present_pattern = true && this.isSetPattern();
    boolean that_present_pattern = true && that.isSetPattern();
    if (this_present_pattern || that_present_pattern) {
      if (!(this_present_pattern && that_present_pattern))
        return false;
      if (!this.pattern.equals(that.pattern))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDateString()) ? 131071 : 524287);
    if (isSetDateString())
      hashCode = hashCode * 8191 + dateString.hashCode();

    hashCode = hashCode * 8191 + ((isSetPattern()) ? 131071 : 524287);
    if (isSetPattern())
      hashCode = hashCode * 8191 + pattern.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LogEventDate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDateString()).compareTo(other.isSetDateString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateString, other.dateString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPattern()).compareTo(other.isSetPattern());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPattern()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pattern, other.pattern);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LogEventDate(");
    boolean first = true;

    sb.append("dateString:");
    if (this.dateString == null) {
      sb.append("null");
    } else {
      sb.append(this.dateString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pattern:");
    if (this.pattern == null) {
      sb.append("null");
    } else {
      sb.append(this.pattern);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogEventDateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LogEventDateStandardScheme getScheme() {
      return new LogEventDateStandardScheme();
    }
  }

  private static class LogEventDateStandardScheme extends org.apache.thrift.scheme.StandardScheme<LogEventDate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LogEventDate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateString = iprot.readString();
              struct.setDateStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATTERN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pattern = iprot.readString();
              struct.setPatternIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LogEventDate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dateString != null) {
        oprot.writeFieldBegin(DATE_STRING_FIELD_DESC);
        oprot.writeString(struct.dateString);
        oprot.writeFieldEnd();
      }
      if (struct.pattern != null) {
        oprot.writeFieldBegin(PATTERN_FIELD_DESC);
        oprot.writeString(struct.pattern);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogEventDateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LogEventDateTupleScheme getScheme() {
      return new LogEventDateTupleScheme();
    }
  }

  private static class LogEventDateTupleScheme extends org.apache.thrift.scheme.TupleScheme<LogEventDate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogEventDate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDateString()) {
        optionals.set(0);
      }
      if (struct.isSetPattern()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDateString()) {
        oprot.writeString(struct.dateString);
      }
      if (struct.isSetPattern()) {
        oprot.writeString(struct.pattern);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogEventDate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.dateString = iprot.readString();
        struct.setDateStringIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pattern = iprot.readString();
        struct.setPatternIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

